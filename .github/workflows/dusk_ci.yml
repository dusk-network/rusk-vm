on:
  pull_request:
  push:
    branches: master

name: Continuous integration

jobs:
  analyze:
    name: Dusk Analyzer
    runs-on: core
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/dusk-network/cargo-dusk-analyzer
      - uses: actions-rs/cargo@v1
        with:
          command: dusk-analyzer

  # We don't run `cargo check` on this repo, since
  # it will only pass if a build has been previously
  # performed. Hence, it is a better idea to only run
  # tests.

  # We don't test on stable for this repo, since
  # no_std and other things in this library
  # depend on the nightly toolchain.

  test_nightly:
    name: Nightly tests
    runs-on: core
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal

      - name: Install WASM32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Build test contracts
        run: make test-contracts

      - name: Build test executables
        uses: actions-rs/cargo@v1
        env:
          RUSTFLAGS: '-Cinline-threshold=0'
          RUSTDOCFLAGS: '-Cinline-threshold=0 -Clink-dead-code'
        with:
          command: test
          args: --all-features --no-run

      - name: Test with kcov
        # Find every executable resulting from building the tests and run each
        # one of them with kcov. This ensures all the code we cover is measured.
        run: >
          find target/debug/deps -type f -executable ! -name "*.*" ! -name "setup*" |
          xargs -n1 kcov --exclude-pattern=/.cargo,/usr/lib,/target,/tests --verify target/cov

      - name: Upload coverage
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

  fmt:
    name: Rustfmt
    runs-on: core
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
